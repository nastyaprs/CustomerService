// <auto-generated />
using System;
using CustomerService.Infrustructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CustomerService.Infrustructure.Migrations
{
    [DbContext(typeof(CustomerServiceDBContext))]
    partial class CustomerServiceDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomerService.Domain.Entities.SupportRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issue_description");

                    b.Property<string>("IssueSubject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issue_subject");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issue_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("status");

                    b.Property<string>("StatusDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_details");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UrgencyLevel")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("urgency_level");

                    b.HasKey("Id")
                        .HasName("pk_support_requests");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_support_requests_customer_id");

                    b.ToTable("support_requests", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.SupportRequestMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<long>("SupportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("support_request_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_support_request_messages");

                    b.HasIndex("SupportRequestId")
                        .HasDatabaseName("ix_support_request_messages_support_request_id");

                    b.ToTable("support_request_messages", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasAlternateKey("Email")
                        .HasName("ak_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.SupportRequest", b =>
                {
                    b.HasOne("CustomerService.Domain.Entities.User", "Customer")
                        .WithMany("SupportRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_requests_users_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.SupportRequestMessage", b =>
                {
                    b.HasOne("CustomerService.Domain.Entities.SupportRequest", "SupportRequest")
                        .WithMany("SupportRequestMessages")
                        .HasForeignKey("SupportRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_request_messages_support_requests_support_request_id");

                    b.Navigation("SupportRequest");
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.SupportRequest", b =>
                {
                    b.Navigation("SupportRequestMessages");
                });

            modelBuilder.Entity("CustomerService.Domain.Entities.User", b =>
                {
                    b.Navigation("SupportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
